#-----------------------------------------
# File headers
#-----------------------------------------
snippet head "Class/Trigger header"
  /**
   *  @author: ${1}
   *  @date: `strftime("%Y-%m-%d %X")` 
   *  @description:
   *      ${2}
   *  
   *  Version History :   
   *    
   */
endsnippet
#-----------------------------------------



#-----------------------------------------
# Properties
#-----------------------------------------
snippet property
  ${4:// Comment}
  ${1:public} ${2:Type} ${3:varName} { get; set; }
endsnippet

snippet plist
  ${4:// Comment}
  ${1:public} List<${2:ObjectType}> ${3:varName} { get; set; }
endsnippet


snippet pmap
  ${5:// Comment}
  ${1:public} Map<${2:Id}, ${3:}> ${4:varName} { get; set; }
endsnippet

#-----------------------------------------



#-----------------------------------------
# Methods
#-----------------------------------------
snippet constructor
  /**
   * Constructor of the class
   */
  public `Filename()`(${1}) {
    ${2}
  }
endsnippet

snippet method
/**
* ${5}
*/
${1:private} ${2:void} ${3:methodName}(${4:params}) {
	${6}
}
endsnippet


snippet testMethod 
  /**
   * ${2}
   */
  static testMethod void ${1}() {
    ${3}
  }
endsnippet

#-----------------------------------------



#-----------------------------------------
# Variables
#-----------------------------------------
snippet list
List<${1:}> ${2} = new List<$1>();
endsnippet
snippet qlist
List<${1:ObjectType}> ${2:varName} = [
	SELECT ${3:Id} 
	FROM $1
	WHERE ${4}
];
endsnippet


snippet map 
  Map<${1:}, ${2:}> ${3} = new Map<$1, $2>();
snippet qmap
  Map<Id, ${1:ObjectType}> ${2} = new Map<Id, $1>([
    SELECT Id${3}
    FROM $1
    WHERE ${4}
  ]);
endsnippet

snippet set
  Set<${1:}> ${2} = new Set<$1>();
endsnippet
  
#-----------------------------------------



#-----------------------------------------
# Loops
#-----------------------------------------
snippet for "Apex For cycle"
for (${1:ObjectType} ${2:varName} : ${3:listName}) {
	${4}
}
endsnippet

snippet qfor "Apex For cycle with a SOQL query"
  for (${1:ObjectType} ${2:varName} : [
      SELECT ${3:Id} 
      FROM $1 
      WHERE ${4}
    ]
  ) {
    ${5}
  }
endsnippet

snippet if
if ( ${1:someVar} ) {
	$2
}
$0
endsnippet
snippet ifor
for (Integer ${1:i} = 0; $1 < ${2:count}; $1++}) {
	${3}
}
endsnippet

#-----------------------------------------



#-----------------------------------------
# Testing utils
#-----------------------------------------
snippet dbg 
  System.debug(LoggingLevel.${1:ERROR}, ${2:textOrVarName});
endsnippet

snippet ass
  System.assert(${1}, '${2:message}');
endsnippet

snippet asse
  System.assertEquals(${1:expected}, ${2:actual});
endsnippet

snippet assne
  System.assertNotEquals(${1:expected}, ${2:actual});
endsnippet

#-----------------------------------------



#-----------------------------------------
# Other Salesforce snippets
#-----------------------------------------
snippet label
  System.Label.${1}
snippet class
  public ${1:with} sharing class ${2:`Filename()`} {

  }
endsnippet


snippet class "extension class with Standard Controller"
  public with sharing class ${1:`Filename()`} {

    private final ApexPages.StandardController $2;

    public $1 (ApexPages.StandardController ${2:stdCon}) {
      this.$2 = $2;
    }

  }
endsnippet


snippet class "extension class with Standard Controller *extends* ControllerBase"
  public with sharing class ${1:`Filename()`} extends ControllerBase {

    public $1 (ApexPages.StandardController ${2:stdCon}) {
      super($2);
    }

    /////////// ControllerBase overrides  /////////////////
    public override Boolean validate() {
      return false;//not in use
    }

    public override Id cancelToObjectId() {
       return getStandardController().getId();
    }
    /////////// END ControllerBase overrides  /////////////////

  }

endsnippet

snippet handler "Trigger Handler class methods for all Before actions"
  private static ${1:`Filename()`} handler;

  public static $1 getHandler() {
    if (null == handler) {
      handler = new $1();
    }
    return handler;

  }
  public void beforeInsert () {
    //nothing currently
  }

  public void beforeUpdate () {
    //nothing currently
  }

  public void beforeDelete () {
    //nothing currently
  }

  public void afterInsert () {
    //nothing currently
  }

  public void afterUpdate () {
    //nothing currently
  }
  public void afterDelete () {
    //nothing currently
  }

  public void afterUnDelete () {
    //nothing currently
  }

endsnippet


snippet trigger "Before trigger with handler template"
  trigger ${1:`Filename()`} on ${2:object-name} (before insert, before update, before delete) {

    $1Handler handler  = $1Handler.getHandler();
    if (Trigger.isInsert) {
      handler.beforeInsert();
    } else if (Trigger.isUpdate) {
      handler.beforeUpdate();
    } else if (Trigger.isDelete) {
      handler.beforeDelete();
    }

  }

endsnippet
snippet trigger "After trigger with handler template"
  trigger ${1:`Filename()`} on ${2:object-name} (after insert, after update, after delete, after undelete) {

    $1Handler handler  = $1Handler.getHandler();
    if (Trigger.isInsert) {
      handler.afterInsert();
    } else if (Trigger.isUpdate) {
      handler.afterUpdate();
    } else if (Trigger.isUnDelete) {
      handler.afterUnDelete();
    }

  }
endsnippet

snippet ver "@version - new change in apex file"
  ${1:`strftime("%Y-%m-%d")`} - ${2:feature-id} - ${3:AG}
    ${4:}

endsnippet
snippet tfor "Apex For cycle"
  for (${1:ObjectType} ${2:varName} : ${3:Trigger.new}) {
      ${4:}
  }

endsnippet
#-----------------------------------------
